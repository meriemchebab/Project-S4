//intégrer QThread dans l' application 
//Modifications avec QThread :
//Créer un thread séparé pour charger les données et tracer les graphiques.
//DataLoaderThread :  nouvelle classe qui utilise QThread pour charger les données depuis le fichier dans un thread séparé
//Signal data_loaded : Le signal est émis une fois que les données sont chargées et prêtes à être utilisées
//on_data_loaded : Cette méthode est appelée dès que le signal est émis, et elle met à jour les données avant de procéder au tracé
//Lors du clic sur le bouton "open", les données sont chargées dans un fil séparé, permettant à l'interface utilisateur de rester fluide et réactive
//Utiliser des signaux ( pour notifier le GUI une fois que l'opération est terminée


from matplotlib.figure import Figure 
from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qtagg import NavigationToolbar2QT as NavigationToolbar
import sys
from PySide6.QtWidgets import (QPushButton, QApplication, QMainWindow, 
                              QWidget, QVBoxLayout, QFileDialog, 
                              QRadioButton, QHBoxLayout)
import numpy as np
from PySide6.QtCore import QThread, Signal

class Myfig(FigureCanvas):
    def __init__(self, parent=None):
        self.fig = Figure(figsize=[12, 7])
        super().__init__(self.fig)
        if parent:
            self.setParent(parent)
        self.ax1 = None
        self.ax2 = None

class button(QPushButton):
    def __init__(self, txt, parent=None):
        super().__init__(txt, parent)  
        self.txt = txt

# Classe pour le thread de chargement des données
class DataLoaderThread(QThread):
    data_loaded = Signal()  # Signal pour notifier quand les données sont chargées

    def __init__(self, file_name):
        super().__init__()
        self.file_name = file_name
        self.h_plane = []
        self.e_plane = []

    def run(self):
        # Charger les données dans un thread séparé
        self.load_data()
        self.data_loaded.emit()  # Émettre le signal lorsque les données sont chargées

    def load_data(self):
        reading_started = False
        reading_h_plane = True

        with open(self.file_name, 'r') as file:
            for line in file:
                line = line.strip()
                if not line:
                    continue

                try:
                    value = float(line)
                    reading_started = True

                    if reading_h_plane:
                        self.h_plane.append(value)
                    else:
                        self.e_plane.append(value)

                except ValueError:
                    if reading_started:
                        reading_h_plane = False
                    continue

class Window(QMainWindow):
    def __init__(self):
        super().__init__()
        main = QWidget()

        self.plot_widget = Myfig(self)
        self.readButton = button("open", self)
        self.plot2D = button("plot", self)
        self.normal = QRadioButton("normalize", self)
        
        self.toolbar = NavigationToolbar(self.plot_widget, self)
        
        button_row = QHBoxLayout()
        button_row.addWidget(self.readButton)
        button_row.addWidget(self.plot2D)
        button_row.addWidget(self.normal)

        layout = QVBoxLayout()
        layout.addLayout(button_row)
        layout.addWidget(self.toolbar)
        layout.addWidget(self.plot_widget, stretch=1)
        main.setLayout(layout)
        self.setCentralWidget(main)

        self.readButton.clicked.connect(self.read_file)
        self.plot2D.clicked.connect(self.plot_2D)
        self.normal.toggled.connect(self.plot_2D)

        self.data = []
        self.h_plane = []
        self.e_plane = []

    def read_file(self):
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.AnyFile)
        dialog.setNameFilter("Text Files (*.txt);;atn files (*.atn);; csv (*.csv)")
        if dialog.exec():
            file_name = dialog.selectedFiles()[0]

            # Créer et démarrer un nouveau thread pour charger les données
            self.data_loader_thread = DataLoaderThread(file_name)
            self.data_loader_thread.data_loaded.connect(self.on_data_loaded)
            self.data_loader_thread.start()

    def on_data_loaded(self):
        # Cette méthode est appelée lorsque les données sont chargées
        self.h_plane = self.data_loader_thread.h_plane
        self.e_plane = self.data_loader_thread.e_plane
        self.plot_2D()  # Afficher les graphiques une fois les données chargées

    def plot_2D(self):
        if not (self.h_plane or self.e_plane):
            print("Insufficient data to plot.")
            return
        
        h_plane_db = np.array(self.h_plane)
        e_plane_db = np.array(self.e_plane)
        
        if self.normal.isChecked():
            if self.h_plane:
                h_plane_db = self.normalize(h_plane_db)
            if self.e_plane:
                e_plane_db = self.normalize(e_plane_db)

        phi_h = np.radians(np.arange(len(h_plane_db)))  
        phi_e = np.radians(np.arange(len(e_plane_db)))
        
        if self.plot_widget.ax1 is not None:
            self.plot_widget.ax1.clear()
        else:
            self.plot_widget.ax1 = self.plot_widget.fig.add_subplot(1, 2, 1, projection='polar')
        
        if self.plot_widget.ax2 is not None:
            self.plot_widget.ax2.clear()
        else:
            self.plot_widget.ax2 = self.plot_widget.fig.add_subplot(1, 2, 2, projection='polar')

        # Tracer le H-plane
        self.plot_widget.ax1.plot(phi_h, h_plane_db, label='H-plane', color='blue')
        self.plot_widget.ax1.set_title('H-plane Pattern (dB)')
        self.plot_widget.ax1.set_theta_zero_location('N')
        self.plot_widget.ax1.set_theta_direction(-1)
        self.plot_widget.ax1.legend()

        # Tracer le E-plane
        self.plot_widget.ax2.plot(phi_e, e_plane_db, label='E-plane', color='red')
        self.plot_widget.ax2.set_title('E-plane Pattern (dB)')
        self.plot_widget.ax2.legend()

        # Redessiner le canvas
        self.plot_widget.draw()
        self.toolbar.push_current()

    def normalize(self, dataN):
        data = dataN - np.max(dataN)
        return data
        
app = QApplication(sys.argv)
window = Window()
window.show()
app.exec()
