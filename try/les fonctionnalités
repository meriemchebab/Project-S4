// Fonction "Save As" pour les plots 3D et 2D//
from PySide6.QtWidgets import QFileDialog

class Window(QMainWindow):
    def __init__(self):
        super().__init__()
        main = QWidget()

        self.plot_widget = Myfig(self)  # create an instance of Myfig
        Button = file_Button("open", self)
        save_button = QPushButton("Save As", self)  # save button

        layout = QHBoxLayout()
        layout.addWidget(Button)
        layout.addWidget(save_button)  # ajouter  save button to layout
        layout.addWidget(self.plot_widget)
        main.setLayout(layout)
        self.setCentralWidget(main)

        Button.clicked.connect(lambda: self.plot_widget.Polar_2d(Button.file.read_file()))
        save_button.clicked.connect(self.save_as)  # Connect Save button to save function

    def save_as(self):
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getSaveFileName(self, "Save Plot", "", "PNG Files (*.png);;JPEG Files (*.jpg);;PDF Files (*.pdf)", options=options)
        if file_path:
            self.plot_widget.fig.savefig(file_path)  # Save the figure to the selected path



//Changement de la couleur des plots//
from PySide6.QtWidgets import QColorDialog

class Window(QMainWindow):
    def __init__(self):
        super().__init__()
        main = QWidget()

        self.plot_widget = Myfig(self)
        Button = file_Button("open", self)
        color_button = QPushButton("Change Color", self)  # Button to change color

        layout = QHBoxLayout()
        layout.addWidget(Button)
        layout.addWidget(color_button)  # Add color button
        layout.addWidget(self.plot_widget)
        main.setLayout(layout)
        self.setCentralWidget(main)

        Button.clicked.connect(lambda: self.plot_widget.Polar_2d(Button.file.read_file()))
        color_button.clicked.connect(self.change_color)  # connnect to change color

    def change_color(self):
        color = QColorDialog.getColor()  # get  selected color
        if color.isValid():
            self.plot_widget.update_plot_color(color.name())  # Update plot color


fe la classe Myfig, pn peut  ajouter une méthode pour mettre à jour la couleur du plot : 
class Myfig(FigureCanvas):
    def __init__(self, parent=None):
        self.fig = Figure(figsize=[4, 4])
        super().__init__(self.fig)
        if parent:
            self.setParent(parent)

    def Polar_2d(self, data):
        self.fig.clear()
        half_length = len(data) // 2
        curve1 = np.array(data[:half_length])
        curve2 = np.array(data[half_length:])
        theta = np.linspace(0, 2 * np.pi, half_length)

        axes = self.fig.subplots(1, 2, subplot_kw={'projection': 'polar'})
        axes[0].plot(theta, curve1, label="Plan H", color='b')
        axes[0].set_title("Plan H")
        axes[0].legend()

        axes[1].plot(theta, curve2, label="Plan E", color='r')
        axes[1].set_title("Plan E")
        axes[1].legend()

        self.draw()

    def update_plot_color(self, color):
        # Change the color dynamically based on user input
        self.fig.clear()  # Clear the current plot
        # redraw with the new color
        self.Polar_2d(self.file.read_file())



//Lecture Multiformat de Fichiers Numériques avec Threading en Python
import csv
import pandas as pd
import threading

def read_file(file_name):
    """
    Lit un fichier (.txt, .atn, .csv, .xlsx) et retourne une liste de float.
    """
    extension = file_name.split('.')[-1].lower()

    if extension in ['txt', 'atn']:
        return read_text_file(file_name)
    elif extension == 'csv':
        return read_csv_file(file_name)
    elif extension == 'xlsx':
        return read_excel_file(file_name)
    else:
        raise ValueError(" Format de fichier non supporté.")

def read_text_file(file_name):
    data = []
    with open(file_name, 'r') as file:
        for line in file:
            try:
                value = float(line.strip())
                data.append(value)
            except ValueError:
                continue
    return data

def read_csv_file(file_name):
    data = []
    with open(file_name, 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            try:
                value = float(row[0])
                data.append(value)
            except (ValueError, IndexError):
                continue
    return data

def read_excel_file(file_name):
    data = []
    df = pd.read_excel(file_name)
    for value in df.iloc[:, 0]:  # première colonne
        try:
            data.append(float(value))
        except ValueError:
            continue
    return data

def threaded_read(file_name):
    try:
        data = read_file(file_name)
        print(f"{file_name} lu avec succès . Nombre de valeurs : {len(data)}")
    except Exception as e:
        print(f"Erreur dans {file_name}  : {e}")

def read_multiple_files(file_list):
    threads = []
    for file_name in file_list:
        thread = threading.Thread(target=threaded_read, args=(file_name,))
        thread.start()
        threads.append(thread)

    for thread in threads:
        thread.join()
